{"version":3,"sources":["webpack:///../src/mdx/non-generated/business-endpoints_preamble.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMaA,G,UAAe,S,uOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,gGAA+E,6BAAGC,WAAW,KAAQ,CACjG,KAAQ,qCADmE,4BAA/E,sIAGA,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,UADR,UAGA,gIAA+G,6BAAGA,WAAW,KAAQ,CACjI,KAAQ,4CADmG,eAA/G,mGAE4H,6BAAGA,WAAW,KAAQ,CAC9I,KAAQ,gEADgH,eAF5H,KAKA,iBAAQ,CACN,GAAM,gBADR,gBAGA,mEACA,mGACA,sBACE,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,oBAApB,0DACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,iBAApB,8DACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,2BAApB,yDAAkI,6BAAGA,WAAW,MAAS,CACrJ,KAAQ,yFADsH,0CAGlI,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,0BAApB,gFAEF,iBAAQ,CACN,GAAM,2BADR,2BAGA,oEAAmD,6BAAGA,WAAW,KAAQ,CACrE,KAAQ,mDADuC,qBAAnD,KAGA,iBAAQ,CACN,GAAM,4BADR,4BAGA,kJAAiI,6BAAGA,WAAW,KAAQ,CACnJ,KAAQ,mIADqH,QAAjI,6NAGA,iBAAQ,CACN,GAAM,qBADR,qBAGA,yGAAwF,6BAAGA,WAAW,KAAQ,CAC1G,KAAQ,gEAD4E,2BAAxF,oHAEyJ,0BAAYA,WAAW,KAAvB,WAFzJ,wDAGA,uGAAsF,kBAAIA,WAAW,KAAf,iEAAtF,2FACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,qEAAoD,6BAAGA,WAAW,KAAQ,CACtE,KAAQ,8EADwC,eAApD,wGAGA,4HAA2G,0BAAYA,WAAW,KAAvB,aAA3G,+EAAgP,0BAAYA,WAAW,KAAvB,2BAAhP,KACA,+BACA,sBACE,kBAAIA,WAAW,MAAf,8GACA,kBAAIA,WAAW,MAAf,qJAA0K,6BAAGA,WAAW,MAAS,CAC7L,KAAQ,mGAD8J,+BAA1K,MAIF,iEAAgD,0BAAYA,WAAW,KAAvB,2BAAhD,KACA,sBACE,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,OAApB,0CAEF,sJAAqI,0BAAYA,WAAW,KAAvB,4BAArI,2BAAqO,0BAAYA,WAAW,KAAvB,2BAArO,KACA,6EACA,wDAAuC,0BAAYA,WAAW,KAAvB,aAAvC,8CAA2I,0BAAYA,WAAW,KAAvB,4BAA3I,qEACA,gCAAe,0BAAYA,WAAW,KAAvB,2BAAf,gTACA,qCAAoB,0BAAYA,WAAW,KAAvB,4BAApB,8bACA,wEAAuD,0BAAYA,WAAW,KAAvB,4BAAvD,YACA,sBACE,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,cAApB,4FACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,cAApB,0FAEF,sCAAqB,0BAAYA,WAAW,KAAvB,4BAArB,2EACA,oCAAmB,kBAAIA,WAAW,KAAf,cAAnB,yHAAmL,kBAAIA,WAAW,KAAf,cAAnL,0LACA,iIAAgH,0BAAYA,WAAW,KAAvB,4BAAhH,qEAA0P,0BAAYA,WAAW,KAAvB,qCAA1P,WAAmV,0BAAYA,WAAW,KAAvB,kBAAnV,WAAyZ,0BAAYA,WAAW,KAAvB,oBAAzZ,OAA6d,0BAAYA,WAAW,KAAvB,kBAA7d,6FAAqnB,0BAAYA,WAAW,KAAvB,oBAArnB,uGAAyxB,6BAAGA,WAAW,KAAQ,CAC3yB,KAAQ,iEAD6wB,mBAAzxB,0BAGA,yEAAwD,0BAAYA,WAAW,KAAvB,4BAAxD,gEACA,iBAAQ,CACN,GAAM,YADR,YAGA,2FAA0E,6BAAGA,WAAW,KAAQ,CAC5F,KAAQ,4CAD8D,eAA1E,+IAGA,iBAAQ,CACN,GAAM,yCADR,yCAGA,oKAAmJ,0BAAYA,WAAW,KAAvB,aAAnJ,oEAA6Q,6BAAGA,WAAW,KAAQ,CAC/R,KAAQ,gDADiQ,wBAA7Q,cAGA,sBACE,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,+CAAoE,0BAAYA,WAAW,MAAvB,oBAApE,QAA0I,0BAAYA,WAAW,MAAvB,uBAA1I,6CAAwP,6BAAGA,WAAW,MAAS,CAC3Q,KAAQ,qEAD4O,QAAxP,MAIF,8HACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oeAmCL,iiBACA,iBAAQ,CACN,GAAM,6BADR,6BAGA,4FACA,sBACE,kBAAIA,WAAW,MAAf,2BACA,kBAAIA,WAAW,MAAf,mEACA,kBAAIA,WAAW,MAAf,6BACA,kBAAIA,WAAW,MAAf,8CAEF,yGACA,sBACE,kBAAIA,WAAW,MAAf,kJACA,kBAAIA,WAAW,MAAf,+CAAoE,0BAAYA,WAAW,MAAvB,sBAApE,uCAA2K,6BAAGA,WAAW,MAAS,CAC9L,KAAQ,qEAD+J,QAA3K,MAIF,kHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iO,qOAqBTJ,EAAWK,gBAAiB","file":"component---src-mdx-non-generated-business-endpoints-preamble-mdx-fff90d1b49ec1f11af0e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/taylork/Development/hack-week-2020/cupcake-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dropbox-business-api\"\n    }}>{`Dropbox Business API`}</h1>\n    <p>{`The Dropbox Business API allows apps to manage the user lifecycle for a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/business\"\n      }}>{`Dropbox Business account`}</a>{` and perform API actions on all members of a team. It also gives apps programmatic access to Dropbox Business admin functionality.`}</p>\n    <h2 {...{\n      \"id\": \"permissions\"\n    }}>{`Permissions`}</h2>\n    <h4 {...{\n      \"id\": \"scopes\"\n    }}>{`Scopes`}</h4>\n    <p>{`Scopes control the level of access your app has into user and team data. After creating your app in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/apps\"\n      }}>{`App Console`}</a>{`, you can select your apps scopes on the Permissions tab. You can read more about scopes in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/lp/developers/reference/oauth-guide\"\n      }}>{`OAuth Guide`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"access-types\"\n    }}>{`Access types`}</h4>\n    <p>{`[For new apps, we recommend using scopes.]`}</p>\n    <p>{`There are four different access types of Dropbox Business API permissions.`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Team information`}</em>{` – Information about the team and aggregate usage data`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Team auditing`}</em>{` – Team information, plus the team's detailed activity log`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Team member file access`}</em>{` – Team information and auditing, plus the ability to `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.dropbox.com/developers/documentation/http/teams#teams-member-file-access\"\n        }}>{`perform any action as any team member`}</a></li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Team member management`}</em>{` – Team information, plus the ability to add, edit, and delete team members`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-an-application\"\n    }}>{`Creating an application`}</h2>\n    <p>{`To create a Dropbox Business app, visit the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/apps/create\"\n      }}>{`app creation page`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"testing-your-application\"\n    }}>{`Testing your application`}</h2>\n    <p>{`To test an app that calls the Dropbox Business API endpoints, you can request a free Dropbox Business Development Account `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.google.com/forms/d/e/1FAIpQLSfkzPmp9srHG9jwE3Uc0bFOwknN-rrLQWr1mf_3FGl86ydCiQ/viewform?entry.1304485640=Developer\"\n      }}>{`here`}</a>{`. This will allow you to test your app using a standard Dropbox Business team. Development accounts are granted on a by-request basis and are contingent on additional terms and conditions outlined in the request form.`}</p>\n    <h2 {...{\n      \"id\": \"linking-to-a-team\"\n    }}>{`Linking to a team`}</h2>\n    <p>{`Developers will need to direct a Dropbox Business team administrator through the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/lp/developers/reference/oauth-guide\"\n      }}>{`standard OAuth 2.0 flow`}</a>{` to install their application on a Dropbox Business team. The OAuth response/redirect will include an additional `}<inlineCode parentName=\"p\">{`team_id`}</inlineCode>{` field that can be used to uniquely identify a team.`}</p>\n    <p>{`Dropbox Business API OAuth tokens can enable extensive access to team data, so `}<em parentName=\"p\">{`it is your responsibility to properly secure them server-side`}</em>{`. They should never be cached in insecure environments or downloaded to client devices.`}</p>\n    <h2 {...{\n      \"id\": \"member-file-access\"\n    }}>{`Member file access`}</h2>\n    <p>{`A Dropbox Business app can make calls to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/documentation/http/teams#documentation\"\n      }}>{`Dropbox API`}</a>{` for any member of the Dropbox Business team. Your app must have Team member file access permission.`}</p>\n    <p>{`To make calls on a member's behalf, use the OAuth token granted to the app by the team. Specify the `}<inlineCode parentName=\"p\">{`member_id`}</inlineCode>{` of the user that the app wants to act on using a custom HTTP header called `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-User`}</inlineCode>{`.`}</p>\n    <p>{`Notes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This feature is currently limited to only team members in the \"active\", \"suspended\", and \"invited\" states.`}</li>\n      <li parentName=\"ul\">{`A common use case for Team member file access is scanning through member Dropbox accounts. The recommended approach for this is repeated calls to `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder-continue\"\n        }}>{`/files/list_folder/continue`}</a>{`.`}</li>\n    </ul>\n    <p>{`An additional error may occur when using `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-User`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`401`}</em>{` Member ID doesn't exist on the team.`}</li>\n    </ul>\n    <p>{`An alternative and advanced method for Business API apps to access and perform operations on team-owned content is to use the `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` HTTP header instead of `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-User`}</inlineCode>{`.`}</p>\n    <p>{`There are a several key differences between the two:`}</p>\n    <p>{`First, both headers specify the `}<inlineCode parentName=\"p\">{`member_id`}</inlineCode>{` of a team member in their values, but for `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` this must refer to a team admin rather than an arbitrary member.`}</p>\n    <p>{`Second, `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-User`}</inlineCode>{` allows access to and operations on content that currently exists in the \"selected\" team member's Dropbox. This includes their private files and folders as well as contents of any shared or team folders they not only have access to but also have added to their Dropbox (i.e. \"mounted\" in API terms).`}</p>\n    <p>{`In contrast, `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` allows access to and operations on any team-owned content, including unmounted content. This includes any team member's private files and folders as well as contents of any shared folders owned by a member of the team and team folders. In particular, the team admin being impersonated doesn't have to have the target content in their Dropbox and doesn't have to be in the membership of any shared or team folders the content might reside in.`}</p>\n    <p>{`Specifically, there are two different modes for `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` header:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Whole Team`}</em>{` The endpoint can access content of team folders as well as team member's private files.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Team Admin`}</em>{` The endpoint can access content of team folders but not team member's private files.`}</li>\n    </ul>\n    <p>{`The supported `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` mode for each API endpoint is documented under Authentication section.`}</p>\n    <p>{`In general, `}<em parentName=\"p\">{`Whole Team`}</em>{` is supported by read-only endpoints in order to simplify referring to and traversing team-owned content. Conversely, `}<em parentName=\"p\">{`Team Admin`}</em>{` is supported by mutable calls in order to perform particular actions an administrator (rather than user) - which may be a required permission for some operations within team spaces.`}</p>\n    <p>{`Since traditional logical paths in Dropbox must refer to mounted content, the endpoints that support the `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` header accept namespace-relative paths. These take the format of `}<inlineCode parentName=\"p\">{`ns:<namespace_id><namespace_path>`}</inlineCode>{`, where `}<inlineCode parentName=\"p\">{`<namespace_id>`}</inlineCode>{` is the `}<inlineCode parentName=\"p\">{`shared_folder_id`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`team_folder_id`}</inlineCode>{` of the shared folder or the team folder containing the file or folder, respectively, and `}<inlineCode parentName=\"p\">{`<namespace_path>`}</inlineCode>{` is the logical path to the content relative to its shared folder or team folder container. See our `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/reference/namespace-guide\"\n      }}>{`namespace guide`}</a>{` for more information.`}</p>\n    <p>{`Note that not all User API endpoints support the `}<inlineCode parentName=\"p\">{`Dropbox-API-Select-Admin`}</inlineCode>{` header. Check the API docs for a list of endpoints that do.`}</p>\n    <h2 {...{\n      \"id\": \"webhooks\"\n    }}>{`Webhooks`}</h2>\n    <p>{`Dropbox Business API apps that have specified a webhook URL in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/apps\"\n      }}>{`App Console`}</a>{` will receive change notifications for the team. There are two classes of change notifications, each associated with different permissions.`}</p>\n    <h3 {...{\n      \"id\": \"team-member-file-access-notifications\"\n    }}>{`Team member file access notifications`}</h3>\n    <p>{`Two types of apps will receive per-user webhook notifications from all members of the team. The webhook notification contains a list of all `}<inlineCode parentName=\"p\">{`member_id`}</inlineCode>{`s that have changes within their account. This is similar to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/webhooks\"\n      }}>{`Dropbox API webhooks`}</a>{` behavior.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Apps with the Team member file access permission`}</li>\n      <li parentName=\"ul\">{`Scoped apps whose link to the team contains `}<inlineCode parentName=\"li\">{`team_member.data`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`files.metadata.read`}</inlineCode>{` scope. See more info about OAuth2 scopes `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.dropbox.com/lp/developers/reference/oauth-guide.html\"\n        }}>{`here`}</a>{`.`}</li>\n    </ul>\n    <p>{`For Team member file access notifications, your endpoint will receive JSON with the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSON\"\n      }}>{`{\n  \"list_folder\": {\n    \"teams\": {\n      \"team_id1\": [\n        \"member_id1\",\n        \"member_id2\",\n        ...\n      ],\n      \"team_id2\": [\n        \"member_id1\",\n        \"member_id2\",\n        ...\n      ],\n      ...\n    }\n  },\n  \"delta\": {\n    \"teams\": {\n      \"team_id1\": [\n        \"member_id1\",\n        \"member_id2\",\n        ...\n      ],\n      \"team_id2\": [\n        \"member_id1\",\n        \"member_id2\",\n        ...\n      ],\n      ...\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Note that a single change to a file in a shared folder will trigger a webhook for each user that the folder is shared with (and will also show up in the /list_folder entries for each account). You may want to track these occurrences to avoid re-processing the same file multiple times. One possible method would be to track a combination of the (unique) shared folder ID, file path, and rev for a file to identify if it is the same as a previously-processed change. Files outside a shared folder don't have this concern.`}</p>\n    <h3 {...{\n      \"id\": \"team-change-notifications\"\n    }}>{`Team change notifications`}</h3>\n    <p>{`This type of notification will be triggered in the following cases:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`User is invited to team`}</li>\n      <li parentName=\"ul\">{`User joins team (transitions from \"invited\" to \"active\" status)`}</li>\n      <li parentName=\"ul\">{`User is removed from team`}</li>\n      <li parentName=\"ul\">{`User's profile or permissions are updated`}</li>\n    </ul>\n    <p>{`There are also two types of apps that are eligible for team change notifications`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Apps with Team member management or Team member file access permissions will receive webhook notifications for changes to the team membership.`}</li>\n      <li parentName=\"ul\">{`Scoped apps whose link to the team contains `}<inlineCode parentName=\"li\">{`members.read scope`}</inlineCode>{`. See more info about OAuth2 scopes `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.dropbox.com/lp/developers/reference/oauth-guide.html\"\n        }}>{`here`}</a>{`.`}</li>\n    </ul>\n    <p>{`For Team change notifications, your endpoint will receive JSON with the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSON\"\n      }}>{`{\n  \"team_events\": [\n    {\n      \"event\": \"member_info_change\",\n      \"team_id\": \"team_id1\",\n      \"member_ids\": [\n        \"member_id1\",\n        \"member_id2\",\n        ...\n      ]\n    },\n    ...\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}