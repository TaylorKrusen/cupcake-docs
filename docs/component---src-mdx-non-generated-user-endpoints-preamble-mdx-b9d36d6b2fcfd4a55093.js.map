{"version":3,"sources":["webpack:///../src/mdx/non-generated/user-endpoints_preamble.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-mdx-non-generated-user-endpoints-preamble-mdx-b9d36d6b2fcfd4a55093.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/taylork/Development/hack-week-2020/cupcake-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dropbox-api-v2\"\n    }}>{`Dropbox API v2`}</h1>\n    <p>{`The Dropbox API allows developers to work with files in Dropbox, including advanced functionality like full-text search, thumbnails, and sharing. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://dropbox.github.io/dropbox-api-v2-explorer/\"\n      }}>{`Dropbox API explorer`}</a>{` is the easiest way to get started making API calls.`}</p>\n    <h2 {...{\n      \"id\": \"request-and-response-formats\"\n    }}>{`Request and response formats`}</h2>\n    <p>{`In general, the Dropbox API uses HTTP POST requests with JSON arguments and JSON responses. Request authentication is via OAuth 2.0 using the `}<inlineCode parentName=\"p\">{`Authorization`}</inlineCode>{` request header or `}<inlineCode parentName=\"p\">{`authorization`}</inlineCode>{` URL parameter.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`.tag`}</inlineCode>{` field in an object identifies the subtype of a struct or selected member of a union.`}</p>\n    <p>{`When specifying a `}<inlineCode parentName=\"p\">{`Void`}</inlineCode>{` member of a union, you may supply just the member string in place of the entire tagged union object. For example, when supplying a `}<inlineCode parentName=\"p\">{`WriteMode`}</inlineCode>{`, you can supply just `}<inlineCode parentName=\"p\">{`\"mode\": \"add\"`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`\"mode\": {\".tag\": \"add\"}}`}</inlineCode>{`. This shorthand is not allowed for non-`}<inlineCode parentName=\"p\">{`Void`}</inlineCode>{` members. For example, the following is not allowed for a `}<inlineCode parentName=\"p\">{`WriteMode`}</inlineCode>{`, as `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` is not a Void member: `}<inlineCode parentName=\"p\">{`\"mode\": \"update\"`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"rpc-endpoints\"\n    }}>{`RPC endpoints`}</h3>\n    <p>{`These endpoints accept arguments as JSON in the request body and return results as JSON in the response body. RPC endpoints are on the `}<inlineCode parentName=\"p\">{`api.dropboxapi.com`}</inlineCode>{` domain.`}</p>\n    <h3 {...{\n      \"id\": \"content-upload-endpoints\"\n    }}>{`Content-upload endpoints`}</h3>\n    <p>{`These endpoints accept file content in the request body, so their arguments are instead passed as JSON in the `}<inlineCode parentName=\"p\">{`Dropbox-API-Arg`}</inlineCode>{` request header or `}<inlineCode parentName=\"p\">{`arg`}</inlineCode>{` URL parameter. These endpoints are on the `}<inlineCode parentName=\"p\">{`content.dropboxapi.com`}</inlineCode>{` domain.`}</p>\n    <h3 {...{\n      \"id\": \"content-download-endpoints\"\n    }}>{`Content-download endpoints`}</h3>\n    <p>{`As with content-upload endpoints, arguments are passed in the `}<inlineCode parentName=\"p\">{`Dropbox-API-Arg`}</inlineCode>{` request header or `}<inlineCode parentName=\"p\">{`arg`}</inlineCode>{` URL parameter. The response body contains file content, so the result will appear as JSON in the `}<inlineCode parentName=\"p\">{`Dropbox-API-Result`}</inlineCode>{` response header. These endpoints are also on the `}<inlineCode parentName=\"p\">{`content.dropboxapi.com`}</inlineCode>{` domain.`}</p>\n    <p>{`These endpoints also support HTTP GET along with `}<inlineCode parentName=\"p\">{`ETag`}</inlineCode>{`-based caching (`}<inlineCode parentName=\"p\">{`If-None-Match`}</inlineCode>{`) and HTTP range requests.`}</p>\n    <p>{`For information on how to properly encode the JSON, see the JSON encoding page.`}</p>\n    <h3 {...{\n      \"id\": \"browser-based-javascript-and-cors-pre-flight-requests\"\n    }}>{`Browser-based JavaScript and CORS pre-flight requests`}</h3>\n    <p>{`When browser-based JavaScript code makes a cross-site HTTP request, the browser must sometimes send a \"pre-flight\" check to make sure the server allows cross-site requests. You can avoid the extra round-trip by ensuring your request meets the CORS definition of a \"simple cross-site request\".`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use URL parameters `}<inlineCode parentName=\"li\">{`arg`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`authorization`}</inlineCode>{` instead of HTTP headers `}<inlineCode parentName=\"li\">{`Dropbox-API-Arg`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Authorization`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Set the `}<inlineCode parentName=\"li\">{`Content-Type`}</inlineCode>{` to \"text/plain; charset=dropbox-cors-hack\" instead of \"application/json\" or \"application/octet-stream\".`}</li>\n      <li parentName=\"ul\">{`Always set the URL parameter `}<inlineCode parentName=\"li\">{`reject_cors_preflight=true`}</inlineCode>{`. This makes it easier to catch cases where your code is unintentionally triggering a pre-flight check.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"date-format\"\n    }}>{`Date format`}</h3>\n    <p>{`All dates in the API use UTC and are strings in the ISO 8601 \"combined date and time representation\" format:\n`}<inlineCode parentName=\"p\">{`2015-05-15T15:50:38Z`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"path-formats\"\n    }}>{`Path formats`}</h3>\n    <p>{`Paths are relative to an application's root (either an app folder or the root of a user's Dropbox, depending on the app's `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/reference/developer-guide#app-permissions\"\n      }}>{`access type`}</a>{`). The empty string (\"\") represents the root folder. All other paths must start with a slash (e.g. \"`}<inlineCode parentName=\"p\">{`/hello/world.txt`}</inlineCode>{`\"). Paths may not end with a slash or whitespace. For other path restrictions, refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/help/syncing-uploads/files-not-syncing\"\n      }}>{`help center`}</a>{`.`}</p>\n    <p>{`Every file and folder in Dropbox also has an ID (e.g. \"`}<inlineCode parentName=\"p\">{`id:abc123xyz`}</inlineCode>{`\") that can be obtained from any endpoint that returns metadata. These IDs are case-sensitive, so they should always be stored with their case preserved, and always compared in a case-sensitive manner. Some endpoints, as noted in the individual endpoint documentation below, can accept IDs in addition to normal paths. A path relative to a folder's ID can be constructed by using a slash (e.g. \"`}<inlineCode parentName=\"p\">{`id:abc123xyz/hello.txt`}</inlineCode>{`\").`}</p>\n    <p>{`For endpoints that accept performing actions on behalf of a team administrator using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dropbox.com/developers/documentation/http/teams#teams-member-file-access\"\n      }}><inlineCode parentName=\"a\">{`Dropbox-API-Select-Admin`}</inlineCode>{` header`}</a>{`, files may be referenced using a namespace-relative path (e.g. \"`}<inlineCode parentName=\"p\">{`ns:123456/cupcake.png`}</inlineCode>{`\"). In this case, the namespace ID, \"`}<inlineCode parentName=\"p\">{`123456`}</inlineCode>{`\", would be the `}<inlineCode parentName=\"p\">{`shared_folder_id`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`team_folder_id`}</inlineCode>{` of the shared folder or the team folder containing the file or folder, and the path, \"`}<inlineCode parentName=\"p\">{`/cupcake.png`}</inlineCode>{`\", would be the logical path to the content relative to its shared folder or team folder container.`}</p>\n    <h3 {...{\n      \"id\": \"path-case-insensitivity\"\n    }}>{`Path case insensitivity`}</h3>\n    <p>{`Like in Dropbox itself, paths in the Dropbox API are case-insensitive, meaning that /A/B/c.txt is the same file as /a/b/C.txt and is the same file as /a/B/c.txt.`}</p>\n    <p>{`This can cause problems for apps that store file metadata from users in case-sensitive databases (such as SQLite or Postgres). Case insensitive collations should be used when storing Dropbox path metadata in such databases. Alternatively, developers need to make sure their query operators are explicitly case insensitive.`}</p>\n    <p>{`Also, while Dropbox is case-insensitive, it makes efforts to be case-preserving. `}<inlineCode parentName=\"p\">{`Metadata.name`}</inlineCode>{` will contain the correct case. `}<inlineCode parentName=\"p\">{`Metadata.path_display`}</inlineCode>{` usually will contain the correct case, but sometimes only in the last path component. If your app needs the correct case for all path components, it can get it from the `}<inlineCode parentName=\"p\">{`Metadata.name`}</inlineCode>{` or last path component of each relevant `}<inlineCode parentName=\"p\">{`Metadata.path_display`}</inlineCode>{` entry.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}